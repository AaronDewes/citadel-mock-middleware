export type extendedPaymentRequest = PayReq & {
  paymentRequest?: string;
};

import {
  Channel,
  ChannelBalanceResponse,
  ChannelCloseSummary,
  ChannelPoint,
  ConnectPeerResponse,
  EstimateFeeResponse,
  FeeReportResponse,
  ForwardingHistoryResponse,
  GenSeedResponse,
  GetInfoResponse,
  ListInvoiceResponse,
  ListPaymentsResponse,
  ListUnspentResponse,
  NewAddressResponse,
  NodeInfo,
  PayReq,
  Peer,
  PendingChannelsResponse,
  SendCoinsResponse,
  SendResponse,
  Transaction,
  WalletBalanceResponse,
} from "./autogenerated-types.js";

export default interface ILightningClient {
  addInvoice(
    amount: number | string,
    memo: string
  ): Promise<{
    rHash: Uint8Array;
    paymentRequest: string;
  }>;
  closeChannel(
    fundingTxId: string,
    index: number | string,
    force: boolean
  ): Promise<void>;
  connectToPeer(
    pubKey: string,
    ip: string,
    port: number | string
  ): Promise<ConnectPeerResponse>;
  decodePaymentRequest(paymentRequest: string): Promise<extendedPaymentRequest>;
  estimateFee(
    address: string,
    amt: number | string,
    confTarget: number
  ): Promise<EstimateFeeResponse>;
  generateAddress(): Promise<NewAddressResponse>;
  generateSeed(): Promise<GenSeedResponse>;
  getChannelBalance(): Promise<ChannelBalanceResponse>;
  getFeeReport(): Promise<FeeReportResponse>;
  getForwardingEvents(
    startTime: number | string,
    endTime: number | string,
    indexOffset: number
  ): Promise<ForwardingHistoryResponse>;
  isOperational(): Promise<boolean>;
  getInfo(): Promise<GetInfoResponse>;
  getNodeInfo(pubKey: string, includeChannels: boolean): Promise<NodeInfo>;
  getOpenChannels(): Promise<Channel[]>;
  getClosedChannels(): Promise<ChannelCloseSummary[]>;
  getPayments(): Promise<ListPaymentsResponse>;
  getPeers(): Promise<Peer[]>;
  getPendingChannels(): Promise<PendingChannelsResponse>;
  getWalletBalance(): Promise<WalletBalanceResponse>;
  initWallet(mnemonic: string[]): Promise<string[]>;
  getInvoices(): Promise<ListInvoiceResponse>;
  getOnChainTransactions(): Promise<Transaction[]>;
  listUnspent(): Promise<ListUnspentResponse>;
  openChannel(
    pubKey: string,
    amt: number | string,
    satPerByte: string | number | undefined
  ): Promise<ChannelPoint>;
  sendCoins(
    addr: string,
    amt: string | number | undefined,
    satPerByte: number | string,
    sendAll: boolean
  ): Promise<SendCoinsResponse>;
  sendPaymentSync(paymentRequest: string, amt: number): Promise<SendResponse>;
  updateChannelPolicy(
    global: boolean,
    fundingTxid: string,
    outputIndex: number | string,
    baseFeeMsat: number | string,
    feeRate: number | string,
    timeLockDelta: number
  ): Promise<void>;
  getVersion(): Promise<string>;
  signMessage(message: string): Promise<string>;
}
