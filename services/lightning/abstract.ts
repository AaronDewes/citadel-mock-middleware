/** Code above is autogenerated and manually cleaned */
export type extendedPaymentRequest = PayReq & {
  paymentRequest?: string;
};

import {
  Channel,
  ChannelBalanceResponse,
  ChannelCloseSummary,
  ChannelPoint,
  ConnectPeerResponse,
  EstimateFeeResponse,
  FeeReportResponse,
  ForwardingHistoryResponse,
  GenSeedResponse,
  GetInfoResponse,
  ListInvoiceResponse,
  ListPaymentsResponse,
  ListUnspentResponse,
  NewAddressResponse,
  NodeInfo,
  PayReq,
  Peer,
  PendingChannelsResponse,
  SendCoinsResponse,
  SendResponse,
  Transaction,
  WalletBalanceResponse,
} from "./autogenerated-types.js";

export default abstract class LightningImpl {
  connectionUrl: string;
  cert: Buffer;

  constructor(connectionUrl: string, cert: Buffer) {
    this.connectionUrl = connectionUrl;
    this.cert = cert;
  }

  abstract addInvoice(
    amount: number | string,
    memo: string
  ): Promise<{
    rHash: Uint8Array;
    paymentRequest: string;
  }>;
  abstract closeChannel(
    fundingTxId: string,
    index: number,
    force: boolean
  ): Promise<void>;
  abstract connectToPeer(
    pubKey: string,
    ip: string,
    port: number | string
  ): Promise<ConnectPeerResponse>;
  abstract decodePaymentRequest(
    paymentRequest: string
  ): Promise<extendedPaymentRequest>;
  abstract estimateFee(
    address: string,
    amt: number,
    confTarget: number
  ): Promise<EstimateFeeResponse>;
  abstract generateAddress(): Promise<NewAddressResponse>;
  abstract generateSeed(): Promise<GenSeedResponse>;
  abstract getChannelBalance(): Promise<ChannelBalanceResponse>;
  abstract getFeeReport(): Promise<FeeReportResponse>;
  abstract getForwardingEvents(
    startTime: number,
    endTime: number,
    indexOffset: number
  ): Promise<ForwardingHistoryResponse>;
  abstract isOperational(): Promise<boolean>;
  abstract getInfo(): Promise<GetInfoResponse>;
  abstract getNodeInfo(
    pubKey: string,
    includeChannels: boolean
  ): Promise<NodeInfo>;
  abstract getOpenChannels(): Promise<Channel[]>;
  abstract getClosedChannels(): Promise<ChannelCloseSummary[]>;
  abstract getPayments(): Promise<ListPaymentsResponse>;
  abstract getPeers(): Promise<Peer[]>;
  abstract getPendingChannels(): Promise<PendingChannelsResponse>;
  abstract getWalletBalance(): Promise<WalletBalanceResponse>;
  abstract initWallet(mnemonic: string[]): Promise<string[]>;
  abstract getInvoices(): Promise<ListInvoiceResponse>;
  abstract getOnChainTransactions(): Promise<Transaction[]>;
  abstract listUnspent(): Promise<ListUnspentResponse>;
  abstract openChannel(
    pubKey: string,
    amt: number,
    satPerByte: number | undefined
  ): Promise<ChannelPoint>;
  abstract sendCoins(
    addr: string,
    amt: number | undefined,
    satPerByte: number,
    sendAll: boolean
  ): Promise<SendCoinsResponse>;
  abstract sendPaymentSync(
    paymentRequest: string,
    amt: number
  ): Promise<SendResponse>;
  abstract updateChannelPolicy(
    global: boolean,
    fundingTxid: string,
    outputIndex: number,
    baseFeeMsat: number,
    feeRate: number,
    timeLockDelta: number
  ): Promise<void>;
}
