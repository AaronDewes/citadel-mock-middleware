/* eslint-disable */
import Long from "long";
// Manually patched with the extension
import _m0 from "protobufjs/minimal.js";
// Manually patched with the extension
import { ChanBackupSnapshot } from "./rpc.js";

export const protobufPackage = "lnrpc";

export interface GenSeedRequest {
  /**
   * aezeed_passphrase is an optional user provided passphrase that will be used
   * to encrypt the generated aezeed cipher seed. When using REST, this field
   * must be encoded as base64.
   */
  aezeedPassphrase: Uint8Array;
  /**
   * seed_entropy is an optional 16-bytes generated via CSPRNG. If not
   * specified, then a fresh set of randomness will be used to create the seed.
   * When using REST, this field must be encoded as base64.
   */
  seedEntropy: Uint8Array;
}

export interface GenSeedResponse {
  /**
   * cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
   * cipher seed obtained by the user. This field is optional, as if not
   * provided, then the daemon will generate a new cipher seed for the user.
   * Otherwise, then the daemon will attempt to recover the wallet state linked
   * to this cipher seed.
   */
  cipherSeedMnemonic: string[];
  /**
   * enciphered_seed are the raw aezeed cipher seed bytes. This is the raw
   * cipher text before run through our mnemonic encoding scheme.
   */
  encipheredSeed: Uint8Array;
}

export interface InitWalletRequest {
  /**
   * wallet_password is the passphrase that should be used to encrypt the
   * wallet. This MUST be at least 8 chars in length. After creation, this
   * password is required to unlock the daemon. When using REST, this field
   * must be encoded as base64.
   */
  walletPassword: Uint8Array;
  /**
   * cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
   * cipher seed obtained by the user. This may have been generated by the
   * GenSeed method, or be an existing seed.
   */
  cipherSeedMnemonic: string[];
  /**
   * aezeed_passphrase is an optional user provided passphrase that will be used
   * to encrypt the generated aezeed cipher seed. When using REST, this field
   * must be encoded as base64.
   */
  aezeedPassphrase: Uint8Array;
  /**
   * recovery_window is an optional argument specifying the address lookahead
   * when restoring a wallet seed. The recovery window applies to each
   * individual branch of the BIP44 derivation paths. Supplying a recovery
   * window of zero indicates that no addresses should be recovered, such after
   * the first initialization of the wallet.
   */
  recoveryWindow: number;
  /**
   * channel_backups is an optional argument that allows clients to recover the
   * settled funds within a set of channels. This should be populated if the
   * user was unable to close out all channels and sweep funds before partial or
   * total data loss occurred. If specified, then after on-chain recovery of
   * funds, lnd begin to carry out the data loss recovery protocol in order to
   * recover the funds in each channel from a remote force closed transaction.
   */
  channelBackups: ChanBackupSnapshot | undefined;
  /**
   * stateless_init is an optional argument instructing the daemon NOT to create
   * any *.macaroon files in its filesystem. If this parameter is set, then the
   * admin macaroon returned in the response MUST be stored by the caller of the
   * RPC as otherwise all access to the daemon will be lost!
   */
  statelessInit: boolean;
}

export interface InitWalletResponse {
  /**
   * The binary serialized admin macaroon that can be used to access the daemon
   * after creating the wallet. If the stateless_init parameter was set to true,
   * this is the ONLY copy of the macaroon and MUST be stored safely by the
   * caller. Otherwise a copy of this macaroon is also persisted on disk by the
   * daemon, together with other macaroon files.
   */
  adminMacaroon: Uint8Array;
}

export interface UnlockWalletRequest {
  /**
   * wallet_password should be the current valid passphrase for the daemon. This
   * will be required to decrypt on-disk material that the daemon requires to
   * function properly. When using REST, this field must be encoded as base64.
   */
  walletPassword: Uint8Array;
  /**
   * recovery_window is an optional argument specifying the address lookahead
   * when restoring a wallet seed. The recovery window applies to each
   * individual branch of the BIP44 derivation paths. Supplying a recovery
   * window of zero indicates that no addresses should be recovered, such after
   * the first initialization of the wallet.
   */
  recoveryWindow: number;
  /**
   * channel_backups is an optional argument that allows clients to recover the
   * settled funds within a set of channels. This should be populated if the
   * user was unable to close out all channels and sweep funds before partial or
   * total data loss occurred. If specified, then after on-chain recovery of
   * funds, lnd begin to carry out the data loss recovery protocol in order to
   * recover the funds in each channel from a remote force closed transaction.
   */
  channelBackups: ChanBackupSnapshot | undefined;
  /**
   * stateless_init is an optional argument instructing the daemon NOT to create
   * any *.macaroon files in its file system.
   */
  statelessInit: boolean;
}

export interface UnlockWalletResponse {}

export interface ChangePasswordRequest {
  /**
   * current_password should be the current valid passphrase used to unlock the
   * daemon. When using REST, this field must be encoded as base64.
   */
  currentPassword: Uint8Array;
  /**
   * new_password should be the new passphrase that will be needed to unlock the
   * daemon. When using REST, this field must be encoded as base64.
   */
  newPassword: Uint8Array;
  /**
   * stateless_init is an optional argument instructing the daemon NOT to create
   * any *.macaroon files in its filesystem. If this parameter is set, then the
   * admin macaroon returned in the response MUST be stored by the caller of the
   * RPC as otherwise all access to the daemon will be lost!
   */
  statelessInit: boolean;
  /**
   * new_macaroon_root_key is an optional argument instructing the daemon to
   * rotate the macaroon root key when set to true. This will invalidate all
   * previously generated macaroons.
   */
  newMacaroonRootKey: boolean;
}

export interface ChangePasswordResponse {
  /**
   * The binary serialized admin macaroon that can be used to access the daemon
   * after rotating the macaroon root key. If both the stateless_init and
   * new_macaroon_root_key parameter were set to true, this is the ONLY copy of
   * the macaroon that was created from the new root key and MUST be stored
   * safely by the caller. Otherwise a copy of this macaroon is also persisted on
   * disk by the daemon, together with other macaroon files.
   */
  adminMacaroon: Uint8Array;
}

const baseGenSeedRequest: object = {};

export const GenSeedRequest = {
  encode(
    message: GenSeedRequest,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    if (message.aezeedPassphrase.length !== 0) {
      writer.uint32(10).bytes(message.aezeedPassphrase);
    }
    if (message.seedEntropy.length !== 0) {
      writer.uint32(18).bytes(message.seedEntropy);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenSeedRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = { ...baseGenSeedRequest } as GenSeedRequest;
    message.aezeedPassphrase = new Uint8Array();
    message.seedEntropy = new Uint8Array();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.aezeedPassphrase = reader.bytes();
          break;
        case 2:
          message.seedEntropy = reader.bytes();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): GenSeedRequest {
    const message = { ...baseGenSeedRequest } as GenSeedRequest;
    message.aezeedPassphrase = new Uint8Array();
    message.seedEntropy = new Uint8Array();
    if (
      object.aezeedPassphrase !== undefined &&
      object.aezeedPassphrase !== null
    ) {
      message.aezeedPassphrase = bytesFromBase64(object.aezeedPassphrase);
    }
    if (object.seedEntropy !== undefined && object.seedEntropy !== null) {
      message.seedEntropy = bytesFromBase64(object.seedEntropy);
    }
    return message;
  },

  toJSON(message: GenSeedRequest): unknown {
    const obj: any = {};
    message.aezeedPassphrase !== undefined &&
      (obj.aezeedPassphrase = base64FromBytes(
        message.aezeedPassphrase !== undefined
          ? message.aezeedPassphrase
          : new Uint8Array()
      ));
    message.seedEntropy !== undefined &&
      (obj.seedEntropy = base64FromBytes(
        message.seedEntropy !== undefined
          ? message.seedEntropy
          : new Uint8Array()
      ));
    return obj;
  },

  fromPartial(object: DeepPartial<GenSeedRequest>): GenSeedRequest {
    const message = { ...baseGenSeedRequest } as GenSeedRequest;
    if (
      object.aezeedPassphrase !== undefined &&
      object.aezeedPassphrase !== null
    ) {
      message.aezeedPassphrase = object.aezeedPassphrase;
    } else {
      message.aezeedPassphrase = new Uint8Array();
    }
    if (object.seedEntropy !== undefined && object.seedEntropy !== null) {
      message.seedEntropy = object.seedEntropy;
    } else {
      message.seedEntropy = new Uint8Array();
    }
    return message;
  },
};

const baseGenSeedResponse: object = { cipherSeedMnemonic: "" };

export const GenSeedResponse = {
  encode(
    message: GenSeedResponse,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    for (const v of message.cipherSeedMnemonic) {
      writer.uint32(10).string(v!);
    }
    if (message.encipheredSeed.length !== 0) {
      writer.uint32(18).bytes(message.encipheredSeed);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenSeedResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = { ...baseGenSeedResponse } as GenSeedResponse;
    message.cipherSeedMnemonic = [];
    message.encipheredSeed = new Uint8Array();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.cipherSeedMnemonic.push(reader.string());
          break;
        case 2:
          message.encipheredSeed = reader.bytes();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): GenSeedResponse {
    const message = { ...baseGenSeedResponse } as GenSeedResponse;
    message.cipherSeedMnemonic = [];
    message.encipheredSeed = new Uint8Array();
    if (
      object.cipherSeedMnemonic !== undefined &&
      object.cipherSeedMnemonic !== null
    ) {
      for (const e of object.cipherSeedMnemonic) {
        message.cipherSeedMnemonic.push(String(e));
      }
    }
    if (object.encipheredSeed !== undefined && object.encipheredSeed !== null) {
      message.encipheredSeed = bytesFromBase64(object.encipheredSeed);
    }
    return message;
  },

  toJSON(message: GenSeedResponse): unknown {
    const obj: any = {};
    if (message.cipherSeedMnemonic) {
      obj.cipherSeedMnemonic = message.cipherSeedMnemonic.map((e) => e);
    } else {
      obj.cipherSeedMnemonic = [];
    }
    message.encipheredSeed !== undefined &&
      (obj.encipheredSeed = base64FromBytes(
        message.encipheredSeed !== undefined
          ? message.encipheredSeed
          : new Uint8Array()
      ));
    return obj;
  },

  fromPartial(object: DeepPartial<GenSeedResponse>): GenSeedResponse {
    const message = { ...baseGenSeedResponse } as GenSeedResponse;
    message.cipherSeedMnemonic = [];
    if (
      object.cipherSeedMnemonic !== undefined &&
      object.cipherSeedMnemonic !== null
    ) {
      for (const e of object.cipherSeedMnemonic) {
        message.cipherSeedMnemonic.push(e);
      }
    }
    if (object.encipheredSeed !== undefined && object.encipheredSeed !== null) {
      message.encipheredSeed = object.encipheredSeed;
    } else {
      message.encipheredSeed = new Uint8Array();
    }
    return message;
  },
};

const baseInitWalletRequest: object = {
  cipherSeedMnemonic: "",
  recoveryWindow: 0,
  statelessInit: false,
};

export const InitWalletRequest = {
  encode(
    message: InitWalletRequest,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    if (message.walletPassword.length !== 0) {
      writer.uint32(10).bytes(message.walletPassword);
    }
    for (const v of message.cipherSeedMnemonic) {
      writer.uint32(18).string(v!);
    }
    if (message.aezeedPassphrase.length !== 0) {
      writer.uint32(26).bytes(message.aezeedPassphrase);
    }
    if (message.recoveryWindow !== 0) {
      writer.uint32(32).int32(message.recoveryWindow);
    }
    if (message.channelBackups !== undefined) {
      ChanBackupSnapshot.encode(
        message.channelBackups,
        writer.uint32(42).fork()
      ).ldelim();
    }
    if (message.statelessInit === true) {
      writer.uint32(48).bool(message.statelessInit);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): InitWalletRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = { ...baseInitWalletRequest } as InitWalletRequest;
    message.cipherSeedMnemonic = [];
    message.walletPassword = new Uint8Array();
    message.aezeedPassphrase = new Uint8Array();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.walletPassword = reader.bytes();
          break;
        case 2:
          message.cipherSeedMnemonic.push(reader.string());
          break;
        case 3:
          message.aezeedPassphrase = reader.bytes();
          break;
        case 4:
          message.recoveryWindow = reader.int32();
          break;
        case 5:
          message.channelBackups = ChanBackupSnapshot.decode(
            reader,
            reader.uint32()
          );
          break;
        case 6:
          message.statelessInit = reader.bool();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): InitWalletRequest {
    const message = { ...baseInitWalletRequest } as InitWalletRequest;
    message.cipherSeedMnemonic = [];
    message.walletPassword = new Uint8Array();
    message.aezeedPassphrase = new Uint8Array();
    if (object.walletPassword !== undefined && object.walletPassword !== null) {
      message.walletPassword = bytesFromBase64(object.walletPassword);
    }
    if (
      object.cipherSeedMnemonic !== undefined &&
      object.cipherSeedMnemonic !== null
    ) {
      for (const e of object.cipherSeedMnemonic) {
        message.cipherSeedMnemonic.push(String(e));
      }
    }
    if (
      object.aezeedPassphrase !== undefined &&
      object.aezeedPassphrase !== null
    ) {
      message.aezeedPassphrase = bytesFromBase64(object.aezeedPassphrase);
    }
    if (object.recoveryWindow !== undefined && object.recoveryWindow !== null) {
      message.recoveryWindow = Number(object.recoveryWindow);
    } else {
      message.recoveryWindow = 0;
    }
    if (object.channelBackups !== undefined && object.channelBackups !== null) {
      message.channelBackups = ChanBackupSnapshot.fromJSON(
        object.channelBackups
      );
    } else {
      message.channelBackups = undefined;
    }
    if (object.statelessInit !== undefined && object.statelessInit !== null) {
      message.statelessInit = Boolean(object.statelessInit);
    } else {
      message.statelessInit = false;
    }
    return message;
  },

  toJSON(message: InitWalletRequest): unknown {
    const obj: any = {};
    message.walletPassword !== undefined &&
      (obj.walletPassword = base64FromBytes(
        message.walletPassword !== undefined
          ? message.walletPassword
          : new Uint8Array()
      ));
    if (message.cipherSeedMnemonic) {
      obj.cipherSeedMnemonic = message.cipherSeedMnemonic.map((e) => e);
    } else {
      obj.cipherSeedMnemonic = [];
    }
    message.aezeedPassphrase !== undefined &&
      (obj.aezeedPassphrase = base64FromBytes(
        message.aezeedPassphrase !== undefined
          ? message.aezeedPassphrase
          : new Uint8Array()
      ));
    message.recoveryWindow !== undefined &&
      (obj.recoveryWindow = message.recoveryWindow);
    message.channelBackups !== undefined &&
      (obj.channelBackups = message.channelBackups
        ? ChanBackupSnapshot.toJSON(message.channelBackups)
        : undefined);
    message.statelessInit !== undefined &&
      (obj.statelessInit = message.statelessInit);
    return obj;
  },

  fromPartial(object: DeepPartial<InitWalletRequest>): InitWalletRequest {
    const message = { ...baseInitWalletRequest } as InitWalletRequest;
    message.cipherSeedMnemonic = [];
    if (object.walletPassword !== undefined && object.walletPassword !== null) {
      message.walletPassword = object.walletPassword;
    } else {
      message.walletPassword = new Uint8Array();
    }
    if (
      object.cipherSeedMnemonic !== undefined &&
      object.cipherSeedMnemonic !== null
    ) {
      for (const e of object.cipherSeedMnemonic) {
        message.cipherSeedMnemonic.push(e);
      }
    }
    if (
      object.aezeedPassphrase !== undefined &&
      object.aezeedPassphrase !== null
    ) {
      message.aezeedPassphrase = object.aezeedPassphrase;
    } else {
      message.aezeedPassphrase = new Uint8Array();
    }
    if (object.recoveryWindow !== undefined && object.recoveryWindow !== null) {
      message.recoveryWindow = object.recoveryWindow;
    } else {
      message.recoveryWindow = 0;
    }
    if (object.channelBackups !== undefined && object.channelBackups !== null) {
      message.channelBackups = ChanBackupSnapshot.fromPartial(
        object.channelBackups
      );
    } else {
      message.channelBackups = undefined;
    }
    if (object.statelessInit !== undefined && object.statelessInit !== null) {
      message.statelessInit = object.statelessInit;
    } else {
      message.statelessInit = false;
    }
    return message;
  },
};

const baseInitWalletResponse: object = {};

export const InitWalletResponse = {
  encode(
    message: InitWalletResponse,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    if (message.adminMacaroon.length !== 0) {
      writer.uint32(10).bytes(message.adminMacaroon);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): InitWalletResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = { ...baseInitWalletResponse } as InitWalletResponse;
    message.adminMacaroon = new Uint8Array();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.adminMacaroon = reader.bytes();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): InitWalletResponse {
    const message = { ...baseInitWalletResponse } as InitWalletResponse;
    message.adminMacaroon = new Uint8Array();
    if (object.adminMacaroon !== undefined && object.adminMacaroon !== null) {
      message.adminMacaroon = bytesFromBase64(object.adminMacaroon);
    }
    return message;
  },

  toJSON(message: InitWalletResponse): unknown {
    const obj: any = {};
    message.adminMacaroon !== undefined &&
      (obj.adminMacaroon = base64FromBytes(
        message.adminMacaroon !== undefined
          ? message.adminMacaroon
          : new Uint8Array()
      ));
    return obj;
  },

  fromPartial(object: DeepPartial<InitWalletResponse>): InitWalletResponse {
    const message = { ...baseInitWalletResponse } as InitWalletResponse;
    if (object.adminMacaroon !== undefined && object.adminMacaroon !== null) {
      message.adminMacaroon = object.adminMacaroon;
    } else {
      message.adminMacaroon = new Uint8Array();
    }
    return message;
  },
};

const baseUnlockWalletRequest: object = {
  recoveryWindow: 0,
  statelessInit: false,
};

export const UnlockWalletRequest = {
  encode(
    message: UnlockWalletRequest,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    if (message.walletPassword.length !== 0) {
      writer.uint32(10).bytes(message.walletPassword);
    }
    if (message.recoveryWindow !== 0) {
      writer.uint32(16).int32(message.recoveryWindow);
    }
    if (message.channelBackups !== undefined) {
      ChanBackupSnapshot.encode(
        message.channelBackups,
        writer.uint32(26).fork()
      ).ldelim();
    }
    if (message.statelessInit === true) {
      writer.uint32(32).bool(message.statelessInit);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UnlockWalletRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = { ...baseUnlockWalletRequest } as UnlockWalletRequest;
    message.walletPassword = new Uint8Array();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.walletPassword = reader.bytes();
          break;
        case 2:
          message.recoveryWindow = reader.int32();
          break;
        case 3:
          message.channelBackups = ChanBackupSnapshot.decode(
            reader,
            reader.uint32()
          );
          break;
        case 4:
          message.statelessInit = reader.bool();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): UnlockWalletRequest {
    const message = { ...baseUnlockWalletRequest } as UnlockWalletRequest;
    message.walletPassword = new Uint8Array();
    if (object.walletPassword !== undefined && object.walletPassword !== null) {
      message.walletPassword = bytesFromBase64(object.walletPassword);
    }
    if (object.recoveryWindow !== undefined && object.recoveryWindow !== null) {
      message.recoveryWindow = Number(object.recoveryWindow);
    } else {
      message.recoveryWindow = 0;
    }
    if (object.channelBackups !== undefined && object.channelBackups !== null) {
      message.channelBackups = ChanBackupSnapshot.fromJSON(
        object.channelBackups
      );
    } else {
      message.channelBackups = undefined;
    }
    if (object.statelessInit !== undefined && object.statelessInit !== null) {
      message.statelessInit = Boolean(object.statelessInit);
    } else {
      message.statelessInit = false;
    }
    return message;
  },

  toJSON(message: UnlockWalletRequest): unknown {
    const obj: any = {};
    message.walletPassword !== undefined &&
      (obj.walletPassword = base64FromBytes(
        message.walletPassword !== undefined
          ? message.walletPassword
          : new Uint8Array()
      ));
    message.recoveryWindow !== undefined &&
      (obj.recoveryWindow = message.recoveryWindow);
    message.channelBackups !== undefined &&
      (obj.channelBackups = message.channelBackups
        ? ChanBackupSnapshot.toJSON(message.channelBackups)
        : undefined);
    message.statelessInit !== undefined &&
      (obj.statelessInit = message.statelessInit);
    return obj;
  },

  fromPartial(object: DeepPartial<UnlockWalletRequest>): UnlockWalletRequest {
    const message = { ...baseUnlockWalletRequest } as UnlockWalletRequest;
    if (object.walletPassword !== undefined && object.walletPassword !== null) {
      message.walletPassword = object.walletPassword;
    } else {
      message.walletPassword = new Uint8Array();
    }
    if (object.recoveryWindow !== undefined && object.recoveryWindow !== null) {
      message.recoveryWindow = object.recoveryWindow;
    } else {
      message.recoveryWindow = 0;
    }
    if (object.channelBackups !== undefined && object.channelBackups !== null) {
      message.channelBackups = ChanBackupSnapshot.fromPartial(
        object.channelBackups
      );
    } else {
      message.channelBackups = undefined;
    }
    if (object.statelessInit !== undefined && object.statelessInit !== null) {
      message.statelessInit = object.statelessInit;
    } else {
      message.statelessInit = false;
    }
    return message;
  },
};

const baseUnlockWalletResponse: object = {};

export const UnlockWalletResponse = {
  encode(
    _: UnlockWalletResponse,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number
  ): UnlockWalletResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = { ...baseUnlockWalletResponse } as UnlockWalletResponse;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(_: any): UnlockWalletResponse {
    const message = { ...baseUnlockWalletResponse } as UnlockWalletResponse;
    return message;
  },

  toJSON(_: UnlockWalletResponse): unknown {
    const obj: any = {};
    return obj;
  },

  fromPartial(_: DeepPartial<UnlockWalletResponse>): UnlockWalletResponse {
    const message = { ...baseUnlockWalletResponse } as UnlockWalletResponse;
    return message;
  },
};

const baseChangePasswordRequest: object = {
  statelessInit: false,
  newMacaroonRootKey: false,
};

export const ChangePasswordRequest = {
  encode(
    message: ChangePasswordRequest,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    if (message.currentPassword.length !== 0) {
      writer.uint32(10).bytes(message.currentPassword);
    }
    if (message.newPassword.length !== 0) {
      writer.uint32(18).bytes(message.newPassword);
    }
    if (message.statelessInit === true) {
      writer.uint32(24).bool(message.statelessInit);
    }
    if (message.newMacaroonRootKey === true) {
      writer.uint32(32).bool(message.newMacaroonRootKey);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number
  ): ChangePasswordRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = { ...baseChangePasswordRequest } as ChangePasswordRequest;
    message.currentPassword = new Uint8Array();
    message.newPassword = new Uint8Array();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.currentPassword = reader.bytes();
          break;
        case 2:
          message.newPassword = reader.bytes();
          break;
        case 3:
          message.statelessInit = reader.bool();
          break;
        case 4:
          message.newMacaroonRootKey = reader.bool();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): ChangePasswordRequest {
    const message = { ...baseChangePasswordRequest } as ChangePasswordRequest;
    message.currentPassword = new Uint8Array();
    message.newPassword = new Uint8Array();
    if (
      object.currentPassword !== undefined &&
      object.currentPassword !== null
    ) {
      message.currentPassword = bytesFromBase64(object.currentPassword);
    }
    if (object.newPassword !== undefined && object.newPassword !== null) {
      message.newPassword = bytesFromBase64(object.newPassword);
    }
    if (object.statelessInit !== undefined && object.statelessInit !== null) {
      message.statelessInit = Boolean(object.statelessInit);
    } else {
      message.statelessInit = false;
    }
    if (
      object.newMacaroonRootKey !== undefined &&
      object.newMacaroonRootKey !== null
    ) {
      message.newMacaroonRootKey = Boolean(object.newMacaroonRootKey);
    } else {
      message.newMacaroonRootKey = false;
    }
    return message;
  },

  toJSON(message: ChangePasswordRequest): unknown {
    const obj: any = {};
    message.currentPassword !== undefined &&
      (obj.currentPassword = base64FromBytes(
        message.currentPassword !== undefined
          ? message.currentPassword
          : new Uint8Array()
      ));
    message.newPassword !== undefined &&
      (obj.newPassword = base64FromBytes(
        message.newPassword !== undefined
          ? message.newPassword
          : new Uint8Array()
      ));
    message.statelessInit !== undefined &&
      (obj.statelessInit = message.statelessInit);
    message.newMacaroonRootKey !== undefined &&
      (obj.newMacaroonRootKey = message.newMacaroonRootKey);
    return obj;
  },

  fromPartial(
    object: DeepPartial<ChangePasswordRequest>
  ): ChangePasswordRequest {
    const message = { ...baseChangePasswordRequest } as ChangePasswordRequest;
    if (
      object.currentPassword !== undefined &&
      object.currentPassword !== null
    ) {
      message.currentPassword = object.currentPassword;
    } else {
      message.currentPassword = new Uint8Array();
    }
    if (object.newPassword !== undefined && object.newPassword !== null) {
      message.newPassword = object.newPassword;
    } else {
      message.newPassword = new Uint8Array();
    }
    if (object.statelessInit !== undefined && object.statelessInit !== null) {
      message.statelessInit = object.statelessInit;
    } else {
      message.statelessInit = false;
    }
    if (
      object.newMacaroonRootKey !== undefined &&
      object.newMacaroonRootKey !== null
    ) {
      message.newMacaroonRootKey = object.newMacaroonRootKey;
    } else {
      message.newMacaroonRootKey = false;
    }
    return message;
  },
};

const baseChangePasswordResponse: object = {};

export const ChangePasswordResponse = {
  encode(
    message: ChangePasswordResponse,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    if (message.adminMacaroon.length !== 0) {
      writer.uint32(10).bytes(message.adminMacaroon);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number
  ): ChangePasswordResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = { ...baseChangePasswordResponse } as ChangePasswordResponse;
    message.adminMacaroon = new Uint8Array();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.adminMacaroon = reader.bytes();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): ChangePasswordResponse {
    const message = { ...baseChangePasswordResponse } as ChangePasswordResponse;
    message.adminMacaroon = new Uint8Array();
    if (object.adminMacaroon !== undefined && object.adminMacaroon !== null) {
      message.adminMacaroon = bytesFromBase64(object.adminMacaroon);
    }
    return message;
  },

  toJSON(message: ChangePasswordResponse): unknown {
    const obj: any = {};
    message.adminMacaroon !== undefined &&
      (obj.adminMacaroon = base64FromBytes(
        message.adminMacaroon !== undefined
          ? message.adminMacaroon
          : new Uint8Array()
      ));
    return obj;
  },

  fromPartial(
    object: DeepPartial<ChangePasswordResponse>
  ): ChangePasswordResponse {
    const message = { ...baseChangePasswordResponse } as ChangePasswordResponse;
    if (object.adminMacaroon !== undefined && object.adminMacaroon !== null) {
      message.adminMacaroon = object.adminMacaroon;
    } else {
      message.adminMacaroon = new Uint8Array();
    }
    return message;
  },
};

/**
 * WalletUnlocker is a service that is used to set up a wallet password for
 * lnd at first startup, and unlock a previously set up wallet.
 */
export const WalletUnlockerDefinition = {
  name: "WalletUnlocker",
  fullName: "lnrpc.WalletUnlocker",
  methods: {
    /**
     * GenSeed is the first method that should be used to instantiate a new lnd
     * instance. This method allows a caller to generate a new aezeed cipher seed
     * given an optional passphrase. If provided, the passphrase will be necessary
     * to decrypt the cipherseed to expose the internal wallet seed.
     *
     * Once the cipherseed is obtained and verified by the user, the InitWallet
     * method should be used to commit the newly generated seed, and create the
     * wallet.
     */
    genSeed: {
      name: "GenSeed",
      requestType: GenSeedRequest,
      requestStream: false,
      responseType: GenSeedResponse,
      responseStream: false,
      options: {},
    },
    /**
     * InitWallet is used when lnd is starting up for the first time to fully
     * initialize the daemon and its internal wallet. At the very least a wallet
     * password must be provided. This will be used to encrypt sensitive material
     * on disk.
     *
     * In the case of a recovery scenario, the user can also specify their aezeed
     * mnemonic and passphrase. If set, then the daemon will use this prior state
     * to initialize its internal wallet.
     *
     * Alternatively, this can be used along with the GenSeed RPC to obtain a
     * seed, then present it to the user. Once it has been verified by the user,
     * the seed can be fed into this RPC in order to commit the new wallet.
     */
    initWallet: {
      name: "InitWallet",
      requestType: InitWalletRequest,
      requestStream: false,
      responseType: InitWalletResponse,
      responseStream: false,
      options: {},
    },
    /**
     * lncli: `unlock`
     * UnlockWallet is used at startup of lnd to provide a password to unlock
     * the wallet database.
     */
    unlockWallet: {
      name: "UnlockWallet",
      requestType: UnlockWalletRequest,
      requestStream: false,
      responseType: UnlockWalletResponse,
      responseStream: false,
      options: {},
    },
    /**
     * lncli: `changepassword`
     * ChangePassword changes the password of the encrypted wallet. This will
     * automatically unlock the wallet database if successful.
     */
    changePassword: {
      name: "ChangePassword",
      requestType: ChangePasswordRequest,
      requestStream: false,
      responseType: ChangePasswordResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

declare var self: any | undefined;
declare var window: any | undefined;
declare var global: any | undefined;
var globalThis: any = (() => {
  if (typeof globalThis !== "undefined") return globalThis;
  if (typeof self !== "undefined") return self;
  if (typeof window !== "undefined") return window;
  if (typeof global !== "undefined") return global;
  throw "Unable to locate global object";
})();

const atob: (b64: string) => string =
  globalThis.atob ||
  ((b64) => globalThis.Buffer.from(b64, "base64").toString("binary"));
function bytesFromBase64(b64: string): Uint8Array {
  const bin = atob(b64);
  const arr = new Uint8Array(bin.length);
  for (let i = 0; i < bin.length; ++i) {
    arr[i] = bin.charCodeAt(i);
  }
  return arr;
}

const btoa: (bin: string) => string =
  globalThis.btoa ||
  ((bin) => globalThis.Buffer.from(bin, "binary").toString("base64"));
function base64FromBytes(arr: Uint8Array): string {
  const bin: string[] = [];
  for (const byte of arr) {
    bin.push(String.fromCharCode(byte));
  }
  return btoa(bin.join(""));
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;
export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Array<infer U>
  ? Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}
